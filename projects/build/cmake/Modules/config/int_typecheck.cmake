cmake_minimum_required(VERSION 2.6.3 FATAL_ERROR)

include(CheckCSourceCompiles)
include(CheckCSourceRuns)
#include(CheckFileOffsetBits)
#include(CheckFuncs)
include(CheckFunctionExists)
#include(CheckHeaderDirent)
include(CheckIncludeFile)
include(CheckIncludeFiles)
include(CheckLibraryExists)
#include(CheckStructMember)
include(CheckSymbolExists)
#include(CheckTypeExists)
include(CheckTypeSize)

# Missing stuff in cmake-2158a9b.tar.gz

#
# Check for integer types
#
# XXX There must be a way to make this simpler <sigh> XXXX
#
CHECK_TYPE_SIZE("long long int"            LONG_LONG_INT)
CHECK_TYPE_SIZE("unsigned long long"       UNSIGNED_LONG_LONG)
CHECK_TYPE_SIZE("unsigned long long int"   UNSIGNED_LONG_LONG_INT)

#
CHECK_TYPE_SIZE(dev_t       DEV_T)
if(NOT HAVE_DEV_T)
  set(dev_t "unsigned int")
endif(NOT HAVE_DEV_T)
#
CHECK_TYPE_SIZE(gid_t       GID_T)
if(NOT HAVE_GID_T)
  if(WIN32)
    set(gid_t "short")
  else(WIN32)
    set(gid_t "unsigned int")
  endif(WIN32)
endif(NOT HAVE_GID_T)
#
CHECK_TYPE_SIZE(id_t        ID_T)
if(NOT HAVE_ID_T)
  if(WIN32)
    set(id_t "short")
  else(WIN32)
    set(id_t "unsigned int")
  endif(WIN32)
endif(NOT HAVE_ID_T)
#
CHECK_TYPE_SIZE(int64_t     INT64_T)
if(NOT HAVE_INT64_T)
  if(WIN32)
    set(int64_t "__int64")
  else(WIN32)
    set(int64_t "long long")
  endif(WIN32)
endif(NOT HAVE_INT64_T)
#
CHECK_TYPE_SIZE(intmax_t    INTMAX_T)
if(NOT HAVE_INTMAX_T)
  set(intmax_t "int64_t")
endif(NOT HAVE_INTMAX_T)
#
CHECK_TYPE_SIZE(mode_t      MODE_T)
if(NOT HAVE_MODE_T)
  if(WIN32)
    set(mode_t "unsigned short")
  else(WIN32)
    set(mode_t "int")
  endif(WIN32)
endif(NOT HAVE_MODE_T)
#
CHECK_TYPE_SIZE(off_t       OFF_T)
if(NOT HAVE_OFF_T)
  set(off_t "__int64")
endif(NOT HAVE_OFF_T)
#
CHECK_TYPE_SIZE(size_t      SIZE_T)
if(NOT HAVE_SIZE_T)
  if("${CMAKE_SIZEOF_VOID_P}" EQUAL 8)
    set(size_t "uint64_t")
  else("${CMAKE_SIZEOF_VOID_P}" EQUAL 8)
    set(size_t   "uint32_t")
  endif("${CMAKE_SIZEOF_VOID_P}" EQUAL 8)
endif(NOT HAVE_SIZE_T)
#
CHECK_TYPE_SIZE(ssize_t     SSIZE_T)
if(NOT HAVE_SSIZE_T)
  if("${CMAKE_SIZEOF_VOID_P}" EQUAL 8)
    set(ssize_t "int64_t")
  else("${CMAKE_SIZEOF_VOID_P}" EQUAL 8)
    set(ssize_t "long")
  endif("${CMAKE_SIZEOF_VOID_P}" EQUAL 8)
endif(NOT HAVE_SSIZE_T)
#
CHECK_TYPE_SIZE(uid_t       UID_T)
if(NOT HAVE_UID_T)
  if(WIN32)
    set(uid_t "short")
  else(WIN32)
    set(uid_t "unsigned int")
  endif(WIN32)
endif(NOT HAVE_UID_T)
#
CHECK_TYPE_SIZE(uint16_t    UINT16_T)
if(NOT HAVE_UINT16_T)
  set(uint16_t "unsigned short")
endif(NOT HAVE_UINT16_T)
#
CHECK_TYPE_SIZE(uint32_t    UINT32_T)
if(NOT HAVE_UINT32_T)
  set(uint32_t "unsigned int")
endif(NOT HAVE_UINT32_T)
CHECK_TYPE_SIZE(int32_t    INT32_T)
if(NOT HAVE_INT32_T)
  set(int32_t "int")
endif(NOT HAVE_INT32_T)
#
CHECK_TYPE_SIZE(uint64_t    UINT64_T)
if(NOT HAVE_UINT64_T)
  if(WIN32)
    set(uint64_t "unsigned __int64")
  else(WIN32)
    set(uint64_t "unsigned long long")
  endif(WIN32)
endif(NOT HAVE_UINT64_T)
#
CHECK_TYPE_SIZE(uintmax_t   UINTMAX_T)
if(NOT HAVE_UINTMAX_T)
  set(uintmax_t "uint64_t")
endif(NOT HAVE_UINTMAX_T)
#
CHECK_TYPE_SIZE(intptr_t   INTPTR_T)
if(NOT HAVE_INTPTR_T)
  if("${CMAKE_SIZEOF_VOID_P}" EQUAL 8)
    set(intptr_t "int64_t")
  else()
    set(intptr_t "int32_t")
  endif()
endif(NOT HAVE_INTPTR_T)
#
CHECK_TYPE_SIZE(uintptr_t   UINTPTR_T)
if(NOT HAVE_UINTPTR_T)
  if("${CMAKE_SIZEOF_VOID_P}" EQUAL 8)
    set(uintptr_t "uint64_t")
  else()
    set(uintptr_t "uint32_t")
  endif()
endif(NOT HAVE_UINTPTR_T)
#
CHECK_TYPE_SIZE(wchar_t     SIZEOF_WCHAR_T)
if(HAVE_SIZEOF_WCHAR_T)
  set(HAVE_WCHAR_T 1)
endif(HAVE_SIZEOF_WCHAR_T)
#
# Check if _FILE_OFFSET_BITS macro needed for large files
#
#CHECK_FILE_OFFSET_BITS()
