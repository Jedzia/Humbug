#set(ZIPPCKG_ZIP_COMMAND )
  
if( NOT ZIPPCKG_ZIP_COMMAND)  
#	find_program(ZIPPCKG_EXECUTABLE wzzip PATHS "$ENV{ProgramFiles}/WinZip" "C:/Program Files/WinZip")
#	if(ZIPPCKG_EXECUTABLE)
##	  set(ZIPPCKG_ZIP_COMMAND "\"${ZIPPCKG_EXECUTABLE}\" -P \"<ARCHIVE>\" @<FILELIST>"  CACHE TYPE STRING FORCE)
#	  set(ZIPPCKG_ZIP_COMMAND "-P \"<ARCHIVE>\" @<FILELIST>"  CACHE TYPE STRING FORCE)
#	  set(ZIPPCKG_ZIP_NEED_QUOTES TRUE  CACHE TYPE BOOL FORCE)
#	endif(ZIPPCKG_EXECUTABLE)

	if(NOT ZIPPCKG_EXECUTABLE)
	  find_program(ZIPPCKG_EXECUTABLE 7z PATHS "D:/Program Files (x86)/7-ZIP_64_bit" "$ENV{ProgramFiles}/7-Zip" "$ENV{ProgramFiles(x86)}/7-ZIP_64_bit" "$ENV{ProgramW6432}/7-ZIP_64_bit") 
	  if(ZIPPCKG_EXECUTABLE)
#		set(ZIPPCKG_ZIP_COMMAND "\"${ZIPPCKG_EXECUTABLE}\" a -tzip \"<ARCHIVE>\" @<FILELIST>" CACHE TYPE STRING FORCE)
		if(LINUX OR UNIX)
			set(ZIPPCKG_ZIP_COMMAND "a -tzip <ARCHIVE> @<FILELIST>" CACHE TYPE STRING FORCE)
			set(ZIPPCKG_ZIP_NEED_QUOTES TRUE CACHE TYPE BOOL FORCE)
		else()
			set(ZIPPCKG_ZIP_COMMAND "a -tzip \"<ARCHIVE>\" @<FILELIST>" CACHE TYPE STRING FORCE)
			set(ZIPPCKG_ZIP_NEED_QUOTES TRUE CACHE TYPE BOOL FORCE)
		#message(FATAL_ERROR "UNIX")
		endif()
	  endif(ZIPPCKG_EXECUTABLE)
	endif(NOT ZIPPCKG_EXECUTABLE)

	if(NOT ZIPPCKG_EXECUTABLE)
	  find_package(Cygwin)
	  find_program(ZIPPCKG_EXECUTABLE zip PATHS "${CYGWIN_INSTALL_PATH}/bin")
	  if(ZIPPCKG_EXECUTABLE)
#		set(ZIPPCKG_ZIP_COMMAND "\"${ZIPPCKG_EXECUTABLE}\" -r \"<ARCHIVE>\" . -i@<FILELIST>" CACHE TYPE STRING FORCE)
		set(ZIPPCKG_ZIP_COMMAND "-r \"<ARCHIVE>\" . -i@<FILELIST>" CACHE TYPE STRING FORCE)
		set(ZIPPCKG_ZIP_NEED_QUOTES FALSE CACHE TYPE BOOL FORCE)
	  endif(ZIPPCKG_EXECUTABLE)
	endif(NOT ZIPPCKG_EXECUTABLE)

#set(ZIPPCKG_EXECUTABLE "${ZIPPCKG_EXECUTABLE}"  CACHE STRING "ZIPPCKG_EXECUTABLE" )

endif( NOT ZIPPCKG_ZIP_COMMAND)  

# CREATEPACKAGE(PACKAGENAME MakeVFS ${VFS_PACKAGE_SOURCE_FILES} base_data dingens.zip)
function(CREATEPACKAGE root_target target VFS_PACKAGE_SOURCE_FILES VFS_PACKAGE_DIR VFS_PACKAGE_NAME)

	#string(REGEX MATCHALL "[a-zA-Z]+\ |[a-zA-Z]+$" VFS_PACKAGE_SOURCE_FILES "${VFS_PACKAGE_SOURCE_FILES}")
if(WIN32)
	separate_arguments(VFS_PACKAGE_SOURCE_FILES_L WINDOWS_COMMAND "${VFS_PACKAGE_SOURCE_FILES}")
else()
	separate_arguments(VFS_PACKAGE_SOURCE_FILES_L UNIX_COMMAND "${VFS_PACKAGE_SOURCE_FILES}")
	string(REPLACE ";" " " VFS_PACKAGE_SOURCE_FILES_L ${VFS_PACKAGE_SOURCE_FILES_L})
endif()

	set(VFS_PACKAGE_PATH ${PROJECT_BINARY_DIR}/${CMAKE_CFG_INTDIR}/${VFS_PACKAGE_DIR} )
	set(VFS_PACKAGE_INSTALL_FILE ${PROJECT_BINARY_DIR}/Release/${VFS_PACKAGE_DIR}/${VFS_PACKAGE_NAME} )
	set(VFS_PACKAGE_FILE ${VFS_PACKAGE_PATH}/${VFS_PACKAGE_NAME} )
	execute_process(COMMAND ${CMAKE_COMMAND} -E make_directory ${VFS_PACKAGE_PATH})

	#set(ZIPPCKG_ARGUMENTS "Drecksau")
	string(REPLACE "@<FILELIST>" "${VFS_PACKAGE_SOURCE_FILES_L}" ZIPPCKG_ARGUMENTS ${ZIPPCKG_ZIP_COMMAND})
	string(REPLACE "<ARCHIVE>" "${VFS_PACKAGE_FILE}" ZIPPCKG_ARGUMENTS ${ZIPPCKG_ARGUMENTS})
	#message(STATUS "ZIPPCKG_ARGUMENTS = ${ZIPPCKG_ARGUMENTS}")
if(WIN32)
	#separate_arguments(ZIPPCKG_ARGUMENTS_LIST WINDOWS_COMMAND "${ZIPPCKG_ARGUMENTS}")
	set(ZIPPCKG_ARGUMENTS_LIST "${ZIPPCKG_ARGUMENTS}")
else()
	separate_arguments(ZIPPCKG_ARGUMENTS_LIST UNIX_COMMAND "${ZIPPCKG_ARGUMENTS}")
endif()
	#message(STATUS "ZIPPCKG_ARGUMENTS_LIST = ${ZIPPCKG_ARGUMENTS_LIST}")

	# POST_BUILD TARGET Build package file. 
	#add_custom_target(${target} ALL DEPENDS ${VFS_PACKAGE_SOURCE_FILES})
	add_custom_target(${target} ALL DEPENDS ${VFS_PACKAGE_FILE})
	add_custom_command(
		OUTPUT ${VFS_PACKAGE_FILE}
		POST_BUILD
		COMMAND ${ZIPPCKG_EXECUTABLE} ${ZIPPCKG_ARGUMENTS_LIST}
		DEPENDS ${VFS_PACKAGE_SOURCE_FILES}
		COMMENT "Build ${VFS_PACKAGE_FILE} package-file." 
	)

	add_dependencies(${root_target} ${target})

	message(STATUS "[CREATEPACKAGE] VFS_PACKAGE_SOURCE_FILES: ${VFS_PACKAGE_SOURCE_FILES}")

	install(FILES 
			${VFS_PACKAGE_INSTALL_FILE}
		DESTINATION bin/${VFS_PACKAGE_DIR}
		COMPONENT Resources
	)


endfunction(CREATEPACKAGE)
