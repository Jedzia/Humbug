
The HumbugLib library uses the 
> cry::test::TestClass 
namespace:subnamespace::ClassName (like the STL) naming schema. Source files
use the .cpp and header files the .h extension. The file name follows the
class name or the name of the most important class, purpose or content in it
and is therefore named in PascalNamingStyle.

Classnames start with a upercase letter, namespaces are completely written in lowercase. The 
folder structure follows the namespace naming.
Functions and member variables start with a lowercase. It is better to prefix the latter 
with m_ like in m_currentDate.

Todo: Look if we should completely follow the ITK coding style guideline 
from "http://www.vtk.org/Wiki/ITK_Coding_Style_Guide". They name functions with a starting
uppercase letter. -> use function lowercase like described upper.

See C++ C:\Documents and Settings\root\My Documents\Coding Standard.pdf

Classes that use the STL algorithms or have to be STL compatible, use the STL naming conventions.
Template definitions use the .hxx file extension with a possible .txx template file referenced
in it. The file name should be completely in lowercase for these STL-like classes.
An example is a user defined iterator or a templated predicate class. They should use functions 
like do_something_with(...) or copy_if(). Instead of the STL naming conventions the class name
should be named with a trailing uppercase.
For classes that are derived from STL base classes (see 1.1) the first letter should also 
uppercased.

1.1) A class derived from a STL class:
	template<class T, class Iterator, class BaseType = std::multimap<T, K >>
	class AdvMap : public BaseType {
	public:
	...
	};

Funktor objects should be named in lowercase (see 1.2).

1.2) Funktor object class.
	class  join  { // binäre Operation als Funktor
		public:
			std::string  operator()(const  std::string&  a,
									const  std::string&  b)  {
				return  a  +  "  and  "  +  b;
			}
	};	

----------


  path path::extension() const
  {
    path name(filename());
    if (name == dot_path || name == dot_dot_path) return path();
    size_type pos(name.m_pathname.rfind(dot));
    return pos == string_type::npos
      ? path()
      : path(name.m_pathname.c_str() + pos);
  }


-X-X-X-X- Fr, 29 Jul 2011 00:30:34 -----------------------------------------------------------

removed from ZipBase (now virtual)
getZipFile
getUnzFile
int CrZipBase::getEntriesCount() const {
std::string CrZipBase::getComment() const {


To generalize:
bool CrZipBase::open(CrZip::Mode mode, zlib_filefunc_def * ioApi) {
void CrZipBase::close() {


-----------------------------------------------------------------------------------------------

-X-X-X-X- Di, 26 Jul 2011 14:51:09 -----------------------------------------------------------

#define Q_DECLARE_PUBLIC(Class)                                    \
    inline Class* q_func() { return static_cast<Class *>(q_ptr); } \
    inline const Class* q_func() const { return static_cast<const Class *>(q_ptr); } \
    friend class Class;

	
#ifdef CRIODEVICE_DEBUG
void debugBinaryString(const QByteArray &input)
{
    QByteArray tmp;
    int startOffset = 0;
    for (int i = 0; i < input.size(); ++i) {
        tmp += input[i];

        if ((i % 16) == 15 || i == (input.size() - 1)) {
            printf("\n%15d:", startOffset);
            startOffset += tmp.size();

            for (int j = 0; j < tmp.size(); ++j)
                printf(" %02x", int(uchar(tmp[j])));
            for (int j = tmp.size(); j < 16 + 1; ++j)
                printf("   ");
            for (int j = 0; j < tmp.size(); ++j)
                printf("%c", isprint(int(uchar(tmp[j]))) ? tmp[j] : '.');
            tmp.clear();
        }
    }
    printf("\n\n");
}

void debugBinaryString(const char *data, int64_t maxlen)
{
    debugBinaryString(QByteArray(data, maxlen));
}
#endif

*******************************
von D:\E\Projects\C++\Humbug\projects\SupportLibs\Crunchy\src\Crunchy\CrIODevice.cpp

#define Q_VOID

#define CHECK_MAXLEN(function, returnType) \
    do { \
        if (maxSize < 0) { \
            qWarning("CrIODevice::"#function": Called with maxSize < 0"); \
            return returnType; \
        } \
    } while (0)

#define CHECK_WRITABLE(function, returnType) \
   do { \
       if ((d->openMode & WriteOnly) == 0) { \
           if (d->openMode == NotOpen) \
               return returnType; \
           qWarning("CrIODevice::"#function": ReadOnly device"); \
           return returnType; \
       } \
   } while (0)

#define CHECK_READABLE(function, returnType) \
   do { \
       if ((d->openMode & ReadOnly) == 0) { \
           if (d->openMode == NotOpen) \
               return returnType; \
           qWarning("CrIODevice::"#function": WriteOnly device"); \
           return returnType; \
       } \
   } while (0)
	
-----------------------------------------------------------------------------------------------
