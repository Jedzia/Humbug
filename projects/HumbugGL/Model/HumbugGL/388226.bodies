class ProcessProject
!!!383490.cpp!!!	run() : void
using cry::FileDetector;
using namespace CPPSTRUCTZ_NAMESPACE::config;
const std::string prjname =
    "D:/E/Projects/C++/HumbugGL/projects/HumbugGL/XSD/Nummer1.tmplproj";
csz::dbg << LOGGER_ENDMSG;
csz::dbg << "GB::getProjectDirectory(): " << GB::getProjectDirectory() << LOGGER_ENDMSG;
/*ConfigString* cfgOption = new ConfigString("START", "\b", "Templates");
options->optionList->addOption(cfgOption);
cfgOption = new ConfigString("END", "\b", "Templates");
options->optionList->addOption(cfgOption);*/

if(options->processingMode == ProcessProject::pmFiles) {
    csz::dbg << LOGGER_ENDMSG;
    csz::dbg << "Files mode:" << options->processingMode << LOGGER_ENDMSG;
    std::vector<std::string>::const_iterator iter, iter_end;

    if(options->inputfiles.size() == 0) {
        return;

        // copy program option list.
    }

    //ConfigOptionList cfg(*options->optionList);
    ProcessTemplateFile ptf(options);

    // store the end iterator, which doesn't change
    iter_end = options->inputfiles.end();

    for (iter = options->inputfiles.begin(); iter != iter_end; iter++) {
        csz::dbg << "[ProcessProject] Processing> " << *iter << " ..." << LOGGER_ENDMSG;
        fs::path filePath(*iter);
        filePath.make_preferred();
        std::string filename;

        if( !d->locateFile(filename, filePath.string() /*,d->m_LookupPaths*/) ) {
            csz::dbg << "filePath not existant: " << filename << LOGGER_ENDMSG;
            continue;
        }
        else {
            csz::dbg << "filePath exists: " << filename << LOGGER_ENDMSG;
            csz::dbg << "fullFilePath: " << filename << LOGGER_ENDMSG;
            ptf.transform(filename);
        }

        /*DocLoader docloader;

           if( docloader.loadFromDisk(*iter) )
            TextDocument doc( docloader.getContent() );
           else
            cout << "Can't load " << *iter << " " << endl;*/

        //TextDocument doc("Testerei von $Code$ ist geil.");
    }
}
else {
    fs::path resultPath;
    fs::path prjPath(options->projectfile);
    prjPath.make_preferred();

    if( prjPath.is_relative() ) {
        fs::path prjDir( GB::getProjectDirectory() );
        prjDir.make_preferred();

        if( !prjPath.has_extension() ) {
            prjPath.replace_extension( GB::getProjectExtension() );
        }

        resultPath = prjDir / prjPath;
        resultPath.make_preferred();
        csz::dbg << "prjDir                   : " << prjDir << LOGGER_ENDMSG;
        csz::dbg << "prjPath                  : " << prjPath << LOGGER_ENDMSG;
    }
    else {
        resultPath = prjPath;
    }

    csz::dbg << "resultPath               : " << resultPath << LOGGER_ENDMSG;
    csz::dbg << LOGGER_ENDMSG;
    std::string resultPathStr( resultPath.string() );
    FileDetector fileIdentity( resultPathStr );

    switch( fileIdentity.getType() ) {
    case FileDetector::ftText:
        LOG_DEBUG("Running ftText");
        d->runTextProject(resultPathStr);
        break;
    case FileDetector::ftZip:
        break;
    default:
        break;
    }
}
