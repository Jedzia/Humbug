class ProjectParser
!!!324098.cpp!!!	parse(in fileName : QString) : ProjectNode

	ProjectNode *node = new ProjectNode(ProjectNode::Root);
	if (fileName.isEmpty())
	{
		return node;
	}

	xml_schema::properties p = xml_schema::properties();
	p.no_namespace_schema_location("D:/E/Projects/C++/HumbugGL/projects/HumbugGL/XSD/project.xsd");
	project_type tmplProject(project_(fileName.toStdString(),0, p));
	ProjectProcessor cp(tmplProject);

	dbgOut(fileName.toStdString() << std::endl);

	return cp.run();
	/* exit 
    in = expr;
    in.replace(" ", "");
    pos = 0;

    addChild(node, parseOrExpression());
    return node;*/
!!!324226.cpp!!!	parseOrExpression() : ProjectNode
    ProjectNode *childNode = parseAndExpression();
    if (matchToken("||")) {
        ProjectNode *node = new ProjectNode(ProjectNode::OrExpression);
        addChild(node, childNode);
        while (matchToken("||")) {
            addToken(node, "||", ProjectNode::Operator);
            addChild(node, parseAndExpression());
        }
        return node;
    } else {
        return childNode;
    }
!!!324354.cpp!!!	parseAndExpression() : ProjectNode
    ProjectNode *childNode = parseNotExpression();
    if (matchToken("&&")) {
        ProjectNode *node = new ProjectNode(ProjectNode::AndExpression);
        addChild(node, childNode);
        while (matchToken("&&")) {
            addToken(node, "&&", ProjectNode::Operator);
            addChild(node, parseNotExpression());
        }
        return node;
    } else {
        return childNode;
    }
!!!324482.cpp!!!	parseNotExpression() : ProjectNode
    if (matchToken("!")) {
        ProjectNode *node = new ProjectNode(ProjectNode::NotExpression);
        while (matchToken("!"))
            addToken(node, "!", ProjectNode::Operator);
        addChild(node, parseAtom());
        return node;
    } else {
        return parseAtom();
    }
!!!324610.cpp!!!	parseAtom() : ProjectNode
    if (matchToken("(")) {
        ProjectNode *node = new ProjectNode(ProjectNode::Atom);
        addToken(node, "(", ProjectNode::Punctuator);
        addChild(node, parseOrExpression());
        addToken(node, ")", ProjectNode::Punctuator);
        return node;
    } else {
        return parseIdentifier();
    }
!!!324738.cpp!!!	parseIdentifier() : ProjectNode
    int startPos = pos;
    while (pos < in.length() && in[pos].isLetterOrNumber())
        ++pos;

    if (pos > startPos) {
        return new ProjectNode(ProjectNode::Identifier,
                        in.mid(startPos, pos - startPos));
    } else {
        return 0;
    }
!!!324866.cpp!!!	addChild(inout parent : ProjectNode, inout child : ProjectNode) : void
    if (child) {
        parent->children += child;
        parent->str += child->str;
        child->parent = parent;
    }
!!!324994.cpp!!!	addToken(inout parent : ProjectNode, in str : QString, in type : Type) : void
    if (in.mid(pos, str.length()) == str) {
        addChild(parent, new ProjectNode(type, str));
        pos += str.length();
    }
!!!325122.cpp!!!	matchToken(in str : QString) : bool
    return in.mid(pos, str.length()) == str;
