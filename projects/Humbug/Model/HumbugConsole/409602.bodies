class ProcessTemplateFile
!!!420354.cpp!!!	operator=(inout source : ProcessTemplateFile) : ProcessTemplateFile
return NULL;
!!!420482.cpp!!!	transform(inout inputFilePath : string) : void
      using cry::FileDetector;
      const std::string prjname =
          "D:/E/Projects/C++/Humbug/projects/Humbug/XSD/Nummer1.tmplproj";
      std::cout << std::endl;
      std::cout << "GB::getProjectDirectory(): " << GB::getProjectDirectory() << std::endl;

      std::cout << "File: " << inputFilePath << std::endl;
  return;
      fs::path resultPath;
      fs::path prjPath(options->projectfile);
      prjPath.make_preferred();
  
      if( prjPath.is_relative() )
      {
          fs::path prjDir( GB::getProjectDirectory() );
          prjDir.make_preferred();
  
          if( !prjPath.has_extension() )
              prjPath.replace_extension( GB::getProjectExtension() );
  
          resultPath = prjDir / prjPath;
          resultPath.make_preferred();
          std::cout << "prjDir                   : " << prjDir << std::endl;
          std::cout << "prjPath                  : " << prjPath << std::endl;
      }
      else
          resultPath = prjPath;
  
      std::cout << "resultPath               : " << resultPath << std::endl;
      std::cout << std::endl;
  
      std::string resultPathStr(resultPath.string());
      FileDetector fileIdentity( resultPathStr );
  
      switch( fileIdentity.getType() ) {
      case FileDetector::ftText:
	      _DEBUG_COUT("Running ftText");
		  d->runTextProject(resultPathStr);
          break;
      case FileDetector::ftZip:
          break;
      default:
          break;
      }
  
