class ProjectProcessor
!!!325250.cpp!!!	ProjectProcessor(in tmplProject : project_type)


!!!325378.cpp!!!	~ProjectProcessor()

!!!325506.cpp!!!	run(inout root : ProjectNode = NULL) : ProjectNode

	if (root == NULL)
	{
		root = new ProjectNode(ProjectNode::Root, "Root");
	}
	//root->children += new ProjectNode(ProjectNode::File, "Moese");
	project::folder_sequence& folders = tmplProject->folder();
	project::file_sequence& files = tmplProject->file();
	processFolder(folders, root);
	processFile(files, root);
	return root;
!!!325634.cpp!!!	test(inout root : ProjectNode = NULL) : ProjectNode

	if (root == NULL)
	{
		root = new ProjectNode(ProjectNode::Root, "Root");
	}
	addChild(root, new ProjectNode(ProjectNode::File, "Moese"));
	ProjectNode* subfolder = new ProjectNode(ProjectNode::Folder, "SubFolder");
	addChild(root, subfolder);
	addChild(subfolder, new ProjectNode(ProjectNode::File, "SubFolder.file"));
	addChild(subfolder, new ProjectNode(ProjectNode::File, "SubFolder.file2"));

	subfolder = new ProjectNode(ProjectNode::Folder, "OtherSubFolder");
	addChild(root, subfolder);
	addChild(subfolder, new ProjectNode(ProjectNode::File, "OtherSubFolder.file"));
	addChild(subfolder, new ProjectNode(ProjectNode::File, "OtherSubFolder.file2"));

	return root;
!!!325762.cpp!!!	processFile(in files : folderType::file_sequence, inout parrent : ProjectNode, in level : int = 0) : void

	for( folderType::file_const_iterator i(files.begin());
		i != files.end();
		++i )
	{
		// Element "greeting" und Element "name" ausgeben
		indent(level);
		dbgOut("folderType File: [" << level << "] " << i->name() << std::endl);
		ProjectNode *curFile = new ProjectNode(ProjectNode::File, QString::fromStdString(i->name()));
		addChild(parrent, curFile);
	}
!!!325890.cpp!!!	processFolder(in folders : folderType::folder_sequence, inout parrent : ProjectNode, in level : int = 0) : void
 
	folderType::folder_const_iterator i(folders.begin());
	for(; i != folders.end(); ++i )
	{
		//dbgOut(std::cout << "folderType Folder: [" << level << "] " << i->name() << std::endl);
		indent(level);
		dbgOut("folderType Folder: [" << level << "] " << i->name() << std::endl);
		ProjectNode *curFolder = new ProjectNode(ProjectNode::Folder, QString::fromStdString(i->name()));
		addChild(parrent, curFolder);
		processFolder(i->folder(), curFolder, level + 1);
		processFile(i->file(), curFolder, level);
		//ProcessFile(static_cast<const project::file_sequence>(i->file()));
	}
!!!326018.cpp!!!	indent(in level : int) : void

	for (int i = 0; i < level ; i++)
	{
		dbgOut("\t");
	}
!!!326146.cpp!!!	addChild(inout parent : ProjectNode, inout child : ProjectNode) : void
	if (child) {
		parent->children += child;
		parent->str += child->str;
		child->parent = parent;
		child->toolTip = "toolTipText: " + child->str;
	}
