// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

#ifndef ASSET_LIST_HXX
#define ASSET_LIST_HXX
// Begin prologue.
//
//
// End prologue.

//#include <wchar.h>
#include <xsd/cxx/config.hxx>

#if (XSD_INT_VERSION != 3030000L)
#error XSD runtime version mismatch
#endif

#include <xsd/cxx/pre.hxx>

#ifndef XSD_USE_CHAR
#define XSD_USE_CHAR
#endif

#ifndef XSD_CXX_TREE_USE_CHAR
#define XSD_CXX_TREE_USE_CHAR
#endif

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/types.hxx>

#include <xsd/cxx/xml/error-handler.hxx>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

#include <xsd/cxx/tree/parsing.hxx>
#include <xsd/cxx/tree/parsing/byte.hxx>
#include <xsd/cxx/tree/parsing/unsigned-byte.hxx>
#include <xsd/cxx/tree/parsing/short.hxx>
#include <xsd/cxx/tree/parsing/unsigned-short.hxx>
#include <xsd/cxx/tree/parsing/int.hxx>
#include <xsd/cxx/tree/parsing/unsigned-int.hxx>
#include <xsd/cxx/tree/parsing/long.hxx>
#include <xsd/cxx/tree/parsing/unsigned-long.hxx>
#include <xsd/cxx/tree/parsing/boolean.hxx>
#include <xsd/cxx/tree/parsing/float.hxx>
#include <xsd/cxx/tree/parsing/double.hxx>
#include <xsd/cxx/tree/parsing/decimal.hxx>

#include <xsd/cxx/xml/dom/serialization-header.hxx>
#include <xsd/cxx/tree/serialization.hxx>
#include <xsd/cxx/tree/serialization/byte.hxx>
#include <xsd/cxx/tree/serialization/unsigned-byte.hxx>
#include <xsd/cxx/tree/serialization/short.hxx>
#include <xsd/cxx/tree/serialization/unsigned-short.hxx>
#include <xsd/cxx/tree/serialization/int.hxx>
#include <xsd/cxx/tree/serialization/unsigned-int.hxx>
#include <xsd/cxx/tree/serialization/long.hxx>
#include <xsd/cxx/tree/serialization/unsigned-long.hxx>
#include <xsd/cxx/tree/serialization/boolean.hxx>
#include <xsd/cxx/tree/serialization/float.hxx>
#include <xsd/cxx/tree/serialization/double.hxx>
#include <xsd/cxx/tree/serialization/decimal.hxx>

#include <xsd/cxx/tree/std-ostream-operators.hxx>

namespace xml_schema
{
  // anyType and anySimpleType.
  //
  typedef ::xsd::cxx::tree::type type;
  typedef ::xsd::cxx::tree::simple_type< type > simple_type;
  typedef ::xsd::cxx::tree::type container;

  // 8-bit
  //
  typedef signed char byte;
  typedef unsigned char unsigned_byte;

  // 16-bit
  //
  typedef short short_;
  typedef unsigned short unsigned_short;

  // 32-bit
  //
  typedef int int_;
  typedef unsigned int unsigned_int;

  // 64-bit
  //
  typedef long long long_;
  typedef unsigned long long unsigned_long;

  // Supposed to be arbitrary-length integral types.
  //
  typedef long long integer;
  typedef long long non_positive_integer;
  typedef unsigned long long non_negative_integer;
  typedef unsigned long long positive_integer;
  typedef long long negative_integer;

  // Boolean.
  //
  typedef bool boolean;

  // Floating-point types.
  //
  typedef float float_;
  typedef double double_;
  typedef double decimal;

  // String types.
  //
  typedef ::xsd::cxx::tree::string< char, simple_type > string;
  typedef ::xsd::cxx::tree::normalized_string< char, string > normalized_string;
  typedef ::xsd::cxx::tree::token< char, normalized_string > token;
  typedef ::xsd::cxx::tree::name< char, token > name;
  typedef ::xsd::cxx::tree::nmtoken< char, token > nmtoken;
  typedef ::xsd::cxx::tree::nmtokens< char, simple_type, nmtoken > nmtokens;
  typedef ::xsd::cxx::tree::ncname< char, name > ncname;
  typedef ::xsd::cxx::tree::language< char, token > language;

  // ID/IDREF.
  //
  typedef ::xsd::cxx::tree::id< char, ncname > id;
  typedef ::xsd::cxx::tree::idref< char, ncname, type > idref;
  typedef ::xsd::cxx::tree::idrefs< char, simple_type, idref > idrefs;

  // URI.
  //
  typedef ::xsd::cxx::tree::uri< char, simple_type > uri;

  // Qualified name.
  //
  typedef ::xsd::cxx::tree::qname< char, simple_type, uri, ncname > qname;

  // Binary.
  //
  typedef ::xsd::cxx::tree::buffer< char > buffer;
  typedef ::xsd::cxx::tree::base64_binary< char, simple_type > base64_binary;
  typedef ::xsd::cxx::tree::hex_binary< char, simple_type > hex_binary;

  // Date/time.
  //
  typedef ::xsd::cxx::tree::time_zone time_zone;
  typedef ::xsd::cxx::tree::date< char, simple_type > date;
  typedef ::xsd::cxx::tree::date_time< char, simple_type > date_time;
  typedef ::xsd::cxx::tree::duration< char, simple_type > duration;
  typedef ::xsd::cxx::tree::gday< char, simple_type > gday;
  typedef ::xsd::cxx::tree::gmonth< char, simple_type > gmonth;
  typedef ::xsd::cxx::tree::gmonth_day< char, simple_type > gmonth_day;
  typedef ::xsd::cxx::tree::gyear< char, simple_type > gyear;
  typedef ::xsd::cxx::tree::gyear_month< char, simple_type > gyear_month;
  typedef ::xsd::cxx::tree::time< char, simple_type > time;

  // Entity.
  //
  typedef ::xsd::cxx::tree::entity< char, ncname > entity;
  typedef ::xsd::cxx::tree::entities< char, simple_type, entity > entities;

  // Namespace information and list stream. Used in
  // serialization functions.
  //
  typedef ::xsd::cxx::xml::dom::namespace_info< char > namespace_info;
  typedef ::xsd::cxx::xml::dom::namespace_infomap< char > namespace_infomap;
  typedef ::xsd::cxx::tree::list_stream< char > list_stream;
  typedef ::xsd::cxx::tree::as_double< double_ > as_double;
  typedef ::xsd::cxx::tree::as_decimal< decimal > as_decimal;
  typedef ::xsd::cxx::tree::facet facet;

  // Flags and properties.
  //
  typedef ::xsd::cxx::tree::flags flags;
  typedef ::xsd::cxx::tree::properties< char > properties;

  // Parsing/serialization diagnostics.
  //
  typedef ::xsd::cxx::tree::severity severity;
  typedef ::xsd::cxx::tree::error< char > error;
  typedef ::xsd::cxx::tree::diagnostics< char > diagnostics;

  // Exceptions.
  //
  typedef ::xsd::cxx::tree::exception< char > exception;
  typedef ::xsd::cxx::tree::bounds< char > bounds;
  typedef ::xsd::cxx::tree::duplicate_id< char > duplicate_id;
  typedef ::xsd::cxx::tree::parsing< char > parsing;
  typedef ::xsd::cxx::tree::expected_element< char > expected_element;
  typedef ::xsd::cxx::tree::unexpected_element< char > unexpected_element;
  typedef ::xsd::cxx::tree::expected_attribute< char > expected_attribute;
  typedef ::xsd::cxx::tree::unexpected_enumerator< char > unexpected_enumerator;
  typedef ::xsd::cxx::tree::expected_text_content< char > expected_text_content;
  typedef ::xsd::cxx::tree::no_prefix_mapping< char > no_prefix_mapping;
  typedef ::xsd::cxx::tree::serialization< char > serialization;

  // Error handler callback interface.
  //
  typedef ::xsd::cxx::xml::error_handler< char > error_handler;

  // DOM interaction.
  //
  namespace dom
  {
    // Automatic pointer for DOMDocument.
    //
    using ::xsd::cxx::xml::dom::auto_ptr;

#ifndef XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
#define XSD_CXX_TREE_TREE_NODE_KEY__XML_SCHEMA
    // DOM user data key for back pointers to tree nodes.
    //
    const XMLCh* const tree_node_key = ::xsd::cxx::tree::user_data_keys::node;
#endif
  }
}

// Forward declarations.
//
class rowset;
class row;
class result;
class eveapi;
class name;
class key;

#include <memory>    // std::auto_ptr
#include <limits>    // std::numeric_limits
#include <algorithm> // std::binary_search

#include <xsd/cxx/xml/char-utf8.hxx>

#include <xsd/cxx/tree/exceptions.hxx>
#include <xsd/cxx/tree/elements.hxx>
#include <xsd/cxx/tree/containers.hxx>
#include <xsd/cxx/tree/list.hxx>

#include <xsd/cxx/xml/dom/parsing-header.hxx>

class rowset: public ::xml_schema::type
{
  public:
  // row
  // 
  typedef ::row row_type;
  typedef ::xsd::cxx::tree::sequence< row_type > row_sequence;
  typedef xsd::cxx::tree::sequence< row_type >::iterator row_iterator;
  typedef xsd::cxx::tree::sequence< row_type >::const_iterator row_const_iterator;
  typedef ::xsd::cxx::tree::traits< row_type, char > row_traits;

  const row_sequence&
  row () const;

  row_sequence&
  row ();

  void
  row (const row_sequence& s);

  // name
  // 
  typedef ::name name_type;
  typedef ::xsd::cxx::tree::traits< name_type, char > name_traits;

  const name_type&
  name () const;

  name_type&
  name ();

  void
  name (const name_type& x);

  void
  name (::std::auto_ptr< name_type > p);

  // key
  // 
  typedef ::key key_type;
  typedef ::xsd::cxx::tree::traits< key_type, char > key_traits;

  const key_type&
  key () const;

  key_type&
  key ();

  void
  key (const key_type& x);

  void
  key (::std::auto_ptr< key_type > p);

  // columns
  // 
  typedef ::xml_schema::string columns_type;
  typedef ::xsd::cxx::tree::traits< columns_type, char > columns_traits;

  const columns_type&
  columns () const;

  columns_type&
  columns ();

  void
  columns (const columns_type& x);

  void
  columns (::std::auto_ptr< columns_type > p);

  // Constructors.
  //
  rowset (const name_type&,
          const key_type&,
          const columns_type&);

  rowset (const xercesc::DOMElement& e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  rowset (const rowset& x,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  virtual rowset*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~rowset ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  row_sequence row_;
  ::xsd::cxx::tree::one< name_type > name_;
  ::xsd::cxx::tree::one< key_type > key_;
  ::xsd::cxx::tree::one< columns_type > columns_;
};

class row: public ::xml_schema::type
{
  public:
  // rowset
  // 
  typedef ::rowset rowset_type;
  typedef ::xsd::cxx::tree::optional< rowset_type > rowset_optional;
  typedef ::xsd::cxx::tree::traits< rowset_type, char > rowset_traits;

  const rowset_optional&
  rowset () const;

  rowset_optional&
  rowset ();

  void
  rowset (const rowset_type& x);

  void
  rowset (const rowset_optional& x);

  void
  rowset (::std::auto_ptr< rowset_type > p);

  // typeID
  // 
  typedef ::xml_schema::short_ typeID_type;
  typedef ::xsd::cxx::tree::traits< typeID_type, char > typeID_traits;

  const typeID_type&
  typeID () const;

  typeID_type&
  typeID ();

  void
  typeID (const typeID_type& x);

  // singleton
  // 
  typedef ::xml_schema::byte singleton_type;
  typedef ::xsd::cxx::tree::traits< singleton_type, char > singleton_traits;

  const singleton_type&
  singleton () const;

  singleton_type&
  singleton ();

  void
  singleton (const singleton_type& x);

  // quantity
  // 
  typedef ::xml_schema::int_ quantity_type;
  typedef ::xsd::cxx::tree::traits< quantity_type, char > quantity_traits;

  const quantity_type&
  quantity () const;

  quantity_type&
  quantity ();

  void
  quantity (const quantity_type& x);

  // locationID
  // 
  typedef ::xml_schema::int_ locationID_type;
  typedef ::xsd::cxx::tree::optional< locationID_type > locationID_optional;
  typedef ::xsd::cxx::tree::traits< locationID_type, char > locationID_traits;

  const locationID_optional&
  locationID () const;

  locationID_optional&
  locationID ();

  void
  locationID (const locationID_type& x);

  void
  locationID (const locationID_optional& x);

  // itemID
  // 
  typedef ::xml_schema::unsigned_long itemID_type;
  typedef ::xsd::cxx::tree::traits< itemID_type, char > itemID_traits;

  const itemID_type&
  itemID () const;

  itemID_type&
  itemID ();

  void
  itemID (const itemID_type& x);

  // flag
  // 
  typedef ::xml_schema::byte flag_type;
  typedef ::xsd::cxx::tree::traits< flag_type, char > flag_traits;

  const flag_type&
  flag () const;

  flag_type&
  flag ();

  void
  flag (const flag_type& x);

  // Constructors.
  //
  row (const typeID_type&,
       const singleton_type&,
       const quantity_type&,
       const itemID_type&,
       const flag_type&);

  row (const xercesc::DOMElement& e,
       ::xml_schema::flags f = 0,
       ::xml_schema::container* c = 0);

  row (const row& x,
       ::xml_schema::flags f = 0,
       ::xml_schema::container* c = 0);

  virtual row*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~row ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  rowset_optional rowset_;
  ::xsd::cxx::tree::one< typeID_type > typeID_;
  ::xsd::cxx::tree::one< singleton_type > singleton_;
  ::xsd::cxx::tree::one< quantity_type > quantity_;
  locationID_optional locationID_;
  ::xsd::cxx::tree::one< itemID_type > itemID_;
  ::xsd::cxx::tree::one< flag_type > flag_;
};

class result: public ::xml_schema::type
{
  public:
  // rowset
  // 
  typedef ::rowset rowset_type;
  typedef ::xsd::cxx::tree::traits< rowset_type, char > rowset_traits;

  const rowset_type&
  rowset () const;

  rowset_type&
  rowset ();

  void
  rowset (const rowset_type& x);

  void
  rowset (::std::auto_ptr< rowset_type > p);

  // Constructors.
  //
  result (const rowset_type&);

  result (::std::auto_ptr< rowset_type >&);

  result (const xercesc::DOMElement& e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  result (const result& x,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  virtual result*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~result ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< rowset_type > rowset_;
};

class eveapi: public ::xml_schema::type
{
  public:
  // currentTime
  // 
  typedef ::xml_schema::string currentTime_type;
  typedef ::xsd::cxx::tree::traits< currentTime_type, char > currentTime_traits;

  const currentTime_type&
  currentTime () const;

  currentTime_type&
  currentTime ();

  void
  currentTime (const currentTime_type& x);

  void
  currentTime (::std::auto_ptr< currentTime_type > p);

  // result
  // 
  typedef ::result result_type;
  typedef ::xsd::cxx::tree::traits< result_type, char > result_traits;

  const result_type&
  result () const;

  result_type&
  result ();

  void
  result (const result_type& x);

  void
  result (::std::auto_ptr< result_type > p);

  // cachedUntil
  // 
  typedef ::xml_schema::string cachedUntil_type;
  typedef ::xsd::cxx::tree::traits< cachedUntil_type, char > cachedUntil_traits;

  const cachedUntil_type&
  cachedUntil () const;

  cachedUntil_type&
  cachedUntil ();

  void
  cachedUntil (const cachedUntil_type& x);

  void
  cachedUntil (::std::auto_ptr< cachedUntil_type > p);

  // version
  // 
  typedef ::xml_schema::byte version_type;
  typedef ::xsd::cxx::tree::traits< version_type, char > version_traits;

  const version_type&
  version () const;

  version_type&
  version ();

  void
  version (const version_type& x);

  // Constructors.
  //
  eveapi (const currentTime_type&,
          const result_type&,
          const cachedUntil_type&,
          const version_type&);

  eveapi (const currentTime_type&,
          ::std::auto_ptr< result_type >&,
          const cachedUntil_type&,
          const version_type&);

  eveapi (const xercesc::DOMElement& e,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  eveapi (const eveapi& x,
          ::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0);

  virtual eveapi*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  virtual 
  ~eveapi ();

  // Implementation.
  //
  protected:
  void
  parse (::xsd::cxx::xml::dom::parser< char >&,
         ::xml_schema::flags);

  protected:
  ::xsd::cxx::tree::one< currentTime_type > currentTime_;
  ::xsd::cxx::tree::one< result_type > result_;
  ::xsd::cxx::tree::one< cachedUntil_type > cachedUntil_;
  ::xsd::cxx::tree::one< version_type > version_;
};

class name: public ::xml_schema::string
{
  public:
  enum value
  {
    assets,
    contents
  };

  name (value v);

  name (const char* v);

  name (const ::std::string& v);

  name (const ::xml_schema::string& v);

  name (const xercesc::DOMElement& e,
        ::xml_schema::flags f = 0,
        ::xml_schema::container* c = 0);

  name (const xercesc::DOMAttr& a,
        ::xml_schema::flags f = 0,
        ::xml_schema::container* c = 0);

  name (const ::std::string& s,
        const xercesc::DOMElement* e,
        ::xml_schema::flags f = 0,
        ::xml_schema::container* c = 0);

  name (const name& x,
        ::xml_schema::flags f = 0,
        ::xml_schema::container* c = 0);

  virtual name*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  name&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_name_convert ();
  }

  protected:
  value
  _xsd_name_convert () const;

  public:
  static const char* const _xsd_name_literals_[2];
  static const value _xsd_name_indexes_[2];
};

class key: public ::xml_schema::string
{
  public:
  enum value
  {
    itemID
  };

  key (value v);

  key (const char* v);

  key (const ::std::string& v);

  key (const ::xml_schema::string& v);

  key (const xercesc::DOMElement& e,
       ::xml_schema::flags f = 0,
       ::xml_schema::container* c = 0);

  key (const xercesc::DOMAttr& a,
       ::xml_schema::flags f = 0,
       ::xml_schema::container* c = 0);

  key (const ::std::string& s,
       const xercesc::DOMElement* e,
       ::xml_schema::flags f = 0,
       ::xml_schema::container* c = 0);

  key (const key& x,
       ::xml_schema::flags f = 0,
       ::xml_schema::container* c = 0);

  virtual key*
  _clone (::xml_schema::flags f = 0,
          ::xml_schema::container* c = 0) const;

  key&
  operator= (value v);

  virtual
  operator value () const
  {
    return _xsd_key_convert ();
  }

  protected:
  value
  _xsd_key_convert () const;

  public:
  static const char* const _xsd_key_literals_[1];
  static const value _xsd_key_indexes_[1];
};

#include <iosfwd>

::std::ostream&
operator<< (::std::ostream&, const rowset&);

::std::ostream&
operator<< (::std::ostream&, const row&);

::std::ostream&
operator<< (::std::ostream&, const result&);

::std::ostream&
operator<< (::std::ostream&, const eveapi&);

::std::ostream&
operator<< (::std::ostream&, name::value);

::std::ostream&
operator<< (::std::ostream&, const name&);

::std::ostream&
operator<< (::std::ostream&, key::value);

::std::ostream&
operator<< (::std::ostream&, const key&);

#include <iosfwd>

#include <xercesc/sax/InputSource.hpp>
#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>

// Parse a URI or a local file.
//

::std::auto_ptr< ::eveapi >
eveapi_ (const ::std::string& uri,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::eveapi >
eveapi_ (const ::std::string& uri,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::eveapi >
eveapi_ (const ::std::string& uri,
         xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse std::istream.
//

::std::auto_ptr< ::eveapi >
eveapi_ (::std::istream& is,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::eveapi >
eveapi_ (::std::istream& is,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::eveapi >
eveapi_ (::std::istream& is,
         xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::eveapi >
eveapi_ (::std::istream& is,
         const ::std::string& id,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::eveapi >
eveapi_ (::std::istream& is,
         const ::std::string& id,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::eveapi >
eveapi_ (::std::istream& is,
         const ::std::string& id,
         xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::InputSource.
//

::std::auto_ptr< ::eveapi >
eveapi_ (xercesc::InputSource& is,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::eveapi >
eveapi_ (xercesc::InputSource& is,
         ::xml_schema::error_handler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::eveapi >
eveapi_ (xercesc::InputSource& is,
         xercesc::DOMErrorHandler& eh,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

// Parse xercesc::DOMDocument.
//

::std::auto_ptr< ::eveapi >
eveapi_ (const xercesc::DOMDocument& d,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

::std::auto_ptr< ::eveapi >
eveapi_ (::xml_schema::dom::auto_ptr< xercesc::DOMDocument >& d,
         ::xml_schema::flags f = 0,
         const ::xml_schema::properties& p = ::xml_schema::properties ());

#include <iosfwd>

#include <xercesc/dom/DOMDocument.hpp>
#include <xercesc/dom/DOMErrorHandler.hpp>
#include <xercesc/framework/XMLFormatter.hpp>

#include <xsd/cxx/xml/dom/auto-ptr.hxx>

// Serialize to std::ostream.
//

void
eveapi_ (::std::ostream& os,
         const ::eveapi& x, 
         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
         const ::std::string& e = "UTF-8",
         ::xml_schema::flags f = 0);

void
eveapi_ (::std::ostream& os,
         const ::eveapi& x, 
         ::xml_schema::error_handler& eh,
         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
         const ::std::string& e = "UTF-8",
         ::xml_schema::flags f = 0);

void
eveapi_ (::std::ostream& os,
         const ::eveapi& x, 
         xercesc::DOMErrorHandler& eh,
         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
         const ::std::string& e = "UTF-8",
         ::xml_schema::flags f = 0);

// Serialize to xercesc::XMLFormatTarget.
//

void
eveapi_ (xercesc::XMLFormatTarget& ft,
         const ::eveapi& x, 
         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
         const ::std::string& e = "UTF-8",
         ::xml_schema::flags f = 0);

void
eveapi_ (xercesc::XMLFormatTarget& ft,
         const ::eveapi& x, 
         ::xml_schema::error_handler& eh,
         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
         const ::std::string& e = "UTF-8",
         ::xml_schema::flags f = 0);

void
eveapi_ (xercesc::XMLFormatTarget& ft,
         const ::eveapi& x, 
         xercesc::DOMErrorHandler& eh,
         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
         const ::std::string& e = "UTF-8",
         ::xml_schema::flags f = 0);

// Serialize to an existing xercesc::DOMDocument.
//

void
eveapi_ (xercesc::DOMDocument& d,
         const ::eveapi& x,
         ::xml_schema::flags f = 0);

// Serialize to a new xercesc::DOMDocument.
//

::xml_schema::dom::auto_ptr< xercesc::DOMDocument >
eveapi_ (const ::eveapi& x, 
         const ::xml_schema::namespace_infomap& m = ::xml_schema::namespace_infomap (),
         ::xml_schema::flags f = 0);

void
operator<< (xercesc::DOMElement&, const rowset&);

void
operator<< (xercesc::DOMElement&, const row&);

void
operator<< (xercesc::DOMElement&, const result&);

void
operator<< (xercesc::DOMElement&, const eveapi&);

void
operator<< (xercesc::DOMElement&, const name&);

void
operator<< (xercesc::DOMAttr&, const name&);

void
operator<< (::xml_schema::list_stream&,
            const name&);

void
operator<< (xercesc::DOMElement&, const key&);

void
operator<< (xercesc::DOMAttr&, const key&);

void
operator<< (::xml_schema::list_stream&,
            const key&);

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

#endif // ASSET_LIST_HXX
